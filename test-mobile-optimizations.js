// PRUEBA ESPEC√çFICA DE OPTIMIZACIONES M√ìVILES PARA VENDEDORES
// Este script verifica que todas las optimizaciones m√≥viles funcionen correctamente

window.testMobileOptimizations = function() {
  console.log('üì± INICIANDO PRUEBA DE OPTIMIZACIONES M√ìVILES PARA VENDEDORES');
  
  // Detectar si estamos en m√≥vil
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
                   ('ontouchstart' in window) ||
                   (window.innerWidth <= 768);
  
  console.log(`üîç Dispositivo detectado: ${isMobile ? 'üì± M√ìVIL' : 'üíª ESCRITORIO'}`);
  
  if (isMobile) {
    console.log('‚úÖ APLICANDO CONFIGURACIONES M√ìVILES OPTIMIZADAS:');
    console.log('üîä Sonidos: Frecuencias 1400-1600Hz, Volumen 1.0');
    console.log('üì≥ Vibraci√≥n: Patrones intensos [800-1000ms]');
    console.log('üîÑ Repeticiones: 4-6 veces vs 3 en desktop');
    console.log('‚ö° Intervalos: 600-800ms vs 1200ms en desktop');
    console.log('‚è±Ô∏è Duraci√≥n: 700-800ms vs 600ms en desktop');
    console.log('üö® Push: Notificaciones agresivas con requireInteraction');
  } else {
    console.log('‚ö†Ô∏è M√ìVIL NO DETECTADO - Usando configuraciones de escritorio');
    console.log('üí° Para prueba real, abre en dispositivo m√≥vil o simula con DevTools (F12 > Toggle Device)');
  }
  
  // Funci√≥n para probar sonido espec√≠fico m√≥vil
  const testMobileSound = (frequency, duration, name) => {
    const AudioContext = window.AudioContext || window.webkitAudioContext;
    if (!AudioContext) {
      console.error('‚ùå AudioContext no disponible');
      return;
    }
    
    const audioContext = new AudioContext();
    console.log(`üîä Probando ${name}: ${frequency}Hz por ${duration}ms`);
    
    // Patr√≥n double con timing m√≥vil optimizado
    const playTone = (delay = 0) => {
      setTimeout(() => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = frequency;
        oscillator.type = 'sine';
        
        // Volumen m√°ximo para m√≥vil
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(1.0, audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + duration / 1000);
        
        // Vibraci√≥n si es m√≥vil
        if (isMobile && 'vibrate' in navigator) {
          navigator.vibrate([duration, 50, duration]);
        }
      }, delay);
    };
    
    // Patr√≥n double con timing de emergencia m√≥vil (30ms)
    playTone(0);
    playTone(duration + 30);
    
    setTimeout(() => {
      audioContext.close();
    }, (duration * 2) + 100);
  };
  
  console.log('\nüß™ INICIANDO SECUENCIA DE PRUEBAS M√ìVILES...');
  
  // Prueba 1: NEW_ORDER (m√°s cr√≠tico para vendedores m√≥viles)
  console.log('\nüî¥ PRUEBA 1: NUEVA ORDEN M√ìVIL (Cr√≠tica para ventas)');
  testMobileSound(1400, isMobile ? 800 : 600, 'Nueva Orden M√≥vil');
  
  setTimeout(() => {
    console.log('\nüü† PRUEBA 2: REPARTIDOR ASIGNADO M√ìVIL');
    testMobileSound(1300, isMobile ? 600 : 500, 'Repartidor Asignado M√≥vil');
  }, 3000);
  
  setTimeout(() => {
    console.log('\nüü° PRUEBA 3: PEDIDO LISTO M√ìVIL');
    testMobileSound(1500, isMobile ? 700 : 550, 'Pedido Listo M√≥vil');
  }, 6000);
  
  // Prueba de notificaci√≥n push agresiva (solo m√≥vil)
  setTimeout(() => {
    if (isMobile && window.testAdvancedNotifications) {
      console.log('\nüì± PRUEBA 4: NOTIFICACI√ìN PUSH AGRESIVA M√ìVIL');
      console.log('üö® Esta deber√≠a aparecer con requireInteraction y vibraci√≥n intensa');
      
      // Simular nueva orden con configuraci√≥n m√≥vil
      if (window.notifyNewOrder) {
        window.notifyNewOrder({
          customer_name: 'Cliente M√≥vil Prueba',
          total: 150.00,
          delivery_type: 'delivery',
          id: 'test-mobile-' + Date.now()
        });
      } else {
        console.warn('‚ö†Ô∏è window.notifyNewOrder no disponible');
      }
    }
  }, 9000);
  
  setTimeout(() => {
    console.log('\n‚úÖ PRUEBAS M√ìVILES COMPLETADAS');
    console.log('\nüìä RESUMEN DE OPTIMIZACIONES M√ìVILES:');
    console.log(`üîä Sonidos: ${isMobile ? 'OPTIMIZADOS' : 'DESKTOP'}`);
    console.log(`üì≥ Vibraci√≥n: ${isMobile && 'vibrate' in navigator ? 'DISPONIBLE' : 'NO DISPONIBLE'}`);
    console.log(`üîÑ Repeticiones: ${isMobile ? 'INCREMENTADAS' : 'EST√ÅNDAR'}`);
    console.log(`üì± Push agresivo: ${isMobile ? 'HABILITADO' : 'DESKTOP'}`);
    
    if (isMobile) {
      console.log('\nüí° Los vendedores m√≥viles ahora deber√≠an escuchar notificaciones M√ÅS FUERTES y FRECUENTES');
      console.log('üéØ Esto deber√≠a prevenir p√©rdida de ventas por sonidos demasiado suaves');
    }
    
    console.log('\nüîÑ Para probar en m√≥vil real: Abre la app en tu tel√©fono y ejecuta testMobileOptimizations()');
  }, 12000);
};

// Auto-ejecutar si se detecta m√≥vil
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
if (isMobile) {
  console.log('üì± M√ìVIL DETECTADO - Optimizaciones cargadas autom√°ticamente');
  console.log('üß™ Para probar: testMobileOptimizations()');
} else {
  console.log('üíª ESCRITORIO DETECTADO');
  console.log('üì± Para simular m√≥vil: F12 > Toggle Device Toolbar');
  console.log('üß™ Para probar: testMobileOptimizations()');
}

console.log('üì± Script de optimizaciones m√≥viles cargado correctamente');