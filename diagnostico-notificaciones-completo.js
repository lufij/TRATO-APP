// =====================================================
// DIAGN√ìSTICO COMPLETO DE NOTIFICACIONES
// =====================================================

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://deaddzyloiqdckublfed.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRlYWRkenlsb2lxZGNrdWJsZmVkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE3NzU4MDMsImV4cCI6MjA0NzM1MTgwM30.wCZjdV3Tr7X0qMU38C29cR8_8Lr9U2-GK8Ie3LJpP4I'

const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üîç DIAGN√ìSTICO COMPLETO DE NOTIFICACIONES')
console.log('==========================================')

// Test 1: Conexi√≥n b√°sica
async function testConnection() {
  console.log('\n1Ô∏è‚É£ PROBANDO CONEXI√ìN B√ÅSICA...')
  try {
    const { data, error } = await supabase.from('orders').select('count').limit(1)
    console.log('   ‚úÖ Conexi√≥n Supabase OK')
    return true
  } catch (err) {
    console.log('   ‚ùå Error conexi√≥n:', err.message)
    return false
  }
}

// Test 2: Verificar usuario actual
async function testAuth() {
  console.log('\n2Ô∏è‚É£ VERIFICANDO AUTENTICACI√ìN...')
  try {
    const { data: { user } } = await supabase.auth.getUser()
    if (user) {
      console.log('   ‚úÖ Usuario autenticado:', user.email)
      return user
    } else {
      console.log('   ‚ö†Ô∏è No hay usuario autenticado')
      return null
    }
  } catch (err) {
    console.log('   ‚ùå Error auth:', err.message)
    return null
  }
}

// Test 3: Verificar realtime connection
async function testRealtimeConnection() {
  console.log('\n3Ô∏è‚É£ PROBANDO CONEXI√ìN REALTIME...')
  
  return new Promise((resolve) => {
    let resolved = false
    const timeout = setTimeout(() => {
      if (!resolved) {
        console.log('   ‚ùå Timeout: Realtime no responde')
        resolved = true
        resolve(false)
      }
    }, 5000)

    const channel = supabase
      .channel('test-connection')
      .on('presence', { event: 'sync' }, () => {
        console.log('   ‚úÖ Realtime conectado')
      })
      .subscribe((status) => {
        if (!resolved) {
          if (status === 'SUBSCRIBED') {
            console.log('   ‚úÖ Suscripci√≥n Realtime exitosa')
            clearTimeout(timeout)
            resolved = true
            supabase.removeChannel(channel)
            resolve(true)
          } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT' || status === 'CLOSED') {
            console.log('   ‚ùå Error Realtime:', status)
            clearTimeout(timeout)
            resolved = true
            resolve(false)
          }
        }
      })
  })
}

// Test 4: Probar suscripci√≥n a orders
async function testOrdersSubscription() {
  console.log('\n4Ô∏è‚É£ PROBANDO SUSCRIPCI√ìN A ORDERS...')
  
  return new Promise((resolve) => {
    let resolved = false
    const timeout = setTimeout(() => {
      if (!resolved) {
        console.log('   ‚ùå Timeout: Suscripci√≥n orders no funciona')
        resolved = true
        resolve(false)
      }
    }, 5000)

    const channel = supabase
      .channel('orders-test')
      .on(
        'postgres_changes',
        { 
          event: '*', 
          schema: 'public', 
          table: 'orders' 
        },
        (payload) => {
          console.log('   üéâ Evento orders detectado:', payload.eventType)
          if (!resolved) {
            clearTimeout(timeout)
            resolved = true
            supabase.removeChannel(channel)
            resolve(true)
          }
        }
      )
      .subscribe((status) => {
        console.log('   üì° Status suscripci√≥n orders:', status)
        if (status === 'SUBSCRIBED') {
          console.log('   ‚úÖ Escuchando cambios en orders...')
          // Crear una orden de prueba para trigger
          setTimeout(async () => {
            if (!resolved) {
              console.log('   üîÑ Creando orden de prueba...')
              try {
                const { error } = await supabase.from('orders').insert({
                  buyer_id: '00000000-0000-0000-0000-000000000000',
                  seller_id: '00000000-0000-0000-0000-000000000000',
                  total: 1,
                  status: 'pending'
                })
                if (error) {
                  console.log('   ‚ö†Ô∏è No se pudo crear orden prueba:', error.message)
                  clearTimeout(timeout)
                  resolved = true
                  supabase.removeChannel(channel)
                  resolve(false)
                }
              } catch (err) {
                console.log('   ‚ö†Ô∏è Error creando orden prueba:', err.message)
              }
            }
          }, 1000)
        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT' || status === 'CLOSED') {
          if (!resolved) {
            console.log('   ‚ùå Error suscripci√≥n orders:', status)
            clearTimeout(timeout)
            resolved = true
            resolve(false)
          }
        }
      })
  })
}

// Test 5: Verificar si hay √≥rdenes recientes
async function testRecentOrders() {
  console.log('\n5Ô∏è‚É£ VERIFICANDO √ìRDENES RECIENTES...')
  try {
    const { data, error } = await supabase
      .from('orders')
      .select('id, created_at, status, seller_id')
      .order('created_at', { ascending: false })
      .limit(5)
    
    if (error) {
      console.log('   ‚ùå Error consultando orders:', error.message)
      return false
    }
    
    console.log('   üìã √öltimas 5 √≥rdenes:')
    data.forEach((order, index) => {
      console.log(`   ${index + 1}. ID: ${order.id.slice(0, 8)}... | ${order.created_at} | ${order.status}`)
    })
    
    return data.length > 0
  } catch (err) {
    console.log('   ‚ùå Error:', err.message)
    return false
  }
}

// Test 6: Probar notificaciones del navegador
async function testBrowserNotifications() {
  console.log('\n6Ô∏è‚É£ PROBANDO NOTIFICACIONES DEL NAVEGADOR...')
  
  if (!('Notification' in window)) {
    console.log('   ‚ùå Notificaciones no soportadas')
    return false
  }
  
  console.log('   üì± Permiso actual:', Notification.permission)
  
  if (Notification.permission === 'granted') {
    console.log('   üîî Enviando notificaci√≥n de prueba...')
    new Notification('üß™ Test de Diagn√≥stico', {
      body: 'Si ves esta notificaci√≥n, el sistema funciona',
      icon: '/icon-192x192.png'
    })
    console.log('   ‚úÖ Notificaci√≥n enviada')
    return true
  } else {
    console.log('   ‚ö†Ô∏è Permisos de notificaci√≥n no otorgados')
    return false
  }
}

// Ejecutar todos los tests
async function runFullDiagnostic() {
  console.log('üöÄ Iniciando diagn√≥stico completo...\n')
  
  const results = {
    connection: await testConnection(),
    auth: await testAuth(),
    realtime: await testRealtimeConnection(),
    orders: await testOrdersSubscription(),
    recentOrders: await testRecentOrders(),
    browserNotifications: await testBrowserNotifications()
  }
  
  console.log('\nüìä RESUMEN DE DIAGN√ìSTICO:')
  console.log('==========================')
  console.log('Conexi√≥n:', results.connection ? '‚úÖ' : '‚ùå')
  console.log('Auth:', results.auth ? '‚úÖ' : '‚ùå')
  console.log('Realtime:', results.realtime ? '‚úÖ' : '‚ùå')
  console.log('Orders Sub:', results.orders ? '‚úÖ' : '‚ùå')
  console.log('Recent Orders:', results.recentOrders ? '‚úÖ' : '‚ùå')
  console.log('Browser Notif:', results.browserNotifications ? '‚úÖ' : '‚ùå')
  
  const allGood = Object.values(results).every(r => r)
  console.log('\nüéØ ESTADO GENERAL:', allGood ? '‚úÖ TODO FUNCIONA' : '‚ùå HAY PROBLEMAS')
  
  if (!allGood) {
    console.log('\nüîß POSIBLES SOLUCIONES:')
    if (!results.connection) console.log('‚Ä¢ Verificar configuraci√≥n Supabase')
    if (!results.auth) console.log('‚Ä¢ Iniciar sesi√≥n en la aplicaci√≥n')
    if (!results.realtime) console.log('‚Ä¢ Verificar configuraci√≥n Realtime en Supabase Dashboard')
    if (!results.orders) console.log('‚Ä¢ Verificar pol√≠ticas RLS y publicaci√≥n realtime')
    if (!results.browserNotifications) console.log('‚Ä¢ Otorgar permisos de notificaci√≥n en el navegador')
  }
}

// Ejecutar si es el main module
if (typeof window !== 'undefined') {
  window.runDiagnostic = runFullDiagnostic
  runFullDiagnostic()
} else {
  runFullDiagnostic()
}
