// =====================================================
// DIAGN√ìSTICO URGENTE - NOTIFICACIONES NO FUNCIONAN
// =====================================================

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://deaddzyloiqdckublfed.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRlYWRkenlsb2lxZGNrdWJsZmVkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzE3NzU4MDMsImV4cCI6MjA0NzM1MTgwM30.wCZjdV3Tr7X0qMU38C29cR8_8Lr9U2-GK8Ie3LJpP4I'

const supabase = createClient(supabaseUrl, supabaseKey)

console.log('üîß DIAGN√ìSTICO URGENTE - Sistema de notificaciones')

// Test 1: Verificar conexi√≥n b√°sica
async function testBasicConnection() {
  console.log('\n1Ô∏è‚É£ Probando conexi√≥n b√°sica...')
  try {
    const { data, error } = await supabase.from('users').select('count').limit(1)
    if (error) {
      console.error('‚ùå Error conexi√≥n b√°sica:', error.message)
      return false
    } else {
      console.log('‚úÖ Conexi√≥n b√°sica OK')
      return true
    }
  } catch (err) {
    console.error('‚ùå Error conexi√≥n:', err.message)
    return false
  }
}

// Test 2: Verificar suscripci√≥n realtime
async function testRealtimeSubscription() {
  console.log('\n2Ô∏è‚É£ Probando suscripci√≥n Realtime...')
  
  return new Promise((resolve) => {
    let subscriptionWorking = false
    
    const channel = supabase
      .channel('diagnostic-test')
      .on(
        'postgres_changes',
        { 
          event: '*', 
          schema: 'public', 
          table: 'orders' 
        },
        (payload) => {
          console.log('üéâ ¬°REALTIME FUNCIONA! Evento recibido:', payload.eventType)
          subscriptionWorking = true
          resolve(true)
        }
      )
      .subscribe((status) => {
        console.log('üì° Status suscripci√≥n:', status)
        if (status === 'SUBSCRIBED') {
          console.log('‚úÖ Suscripci√≥n Realtime activa')
          
          // Timeout para verificar si llegan eventos
          setTimeout(() => {
            if (!subscriptionWorking) {
              console.log('‚ö†Ô∏è Suscripci√≥n activa pero no recibe eventos')
            }
            supabase.removeChannel(channel)
            resolve(subscriptionWorking)
          }, 3000)
        } else if (status === 'CHANNEL_ERROR') {
          console.error('‚ùå Error en canal Realtime')
          resolve(false)
        }
      })
  })
}

// Test 3: Crear orden de prueba y verificar trigger
async function testOrderCreationAndTrigger() {
  console.log('\n3Ô∏è‚É£ Creando orden de prueba...')
  
  try {
    // Obtener un usuario vendedor y comprador
    const { data: users } = await supabase
      .from('users')
      .select('id, role')
      .limit(10)
    
    const seller = users?.find(u => u.role === 'vendedor')
    const buyer = users?.find(u => u.role === 'comprador')
    
    if (!seller || !buyer) {
      console.error('‚ùå No se encontraron usuarios vendedor/comprador')
      return false
    }
    
    console.log('üë§ Usando vendedor:', seller.id)
    console.log('üë§ Usando comprador:', buyer.id)
    
    // Crear orden
    const { data: order, error } = await supabase
      .from('orders')
      .insert({
        buyer_id: buyer.id,
        seller_id: seller.id,
        total: 999,
        status: 'pendiente',
        delivery_method: 'pickup',
        delivery_address: 'Diagn√≥stico test'
      })
      .select()
      .single()
    
    if (error) {
      console.error('‚ùå Error creando orden:', error.message)
      return false
    }
    
    console.log('‚úÖ Orden creada exitosamente:', order.id)
    return true
    
  } catch (err) {
    console.error('‚ùå Error en test de orden:', err.message)
    return false
  }
}

// Test 4: Verificar permisos de notificaciones
async function testNotificationPermissions() {
  console.log('\n4Ô∏è‚É£ Verificando permisos de notificaciones...')
  
  if (typeof window !== 'undefined' && 'Notification' in window) {
    console.log('üìã Notification API disponible')
    console.log('üîî Permiso actual:', Notification.permission)
    
    if (Notification.permission === 'default') {
      console.log('‚ö†Ô∏è Permisos no solicitados a√∫n')
    } else if (Notification.permission === 'denied') {
      console.error('‚ùå Permisos de notificaci√≥n denegados')
    } else {
      console.log('‚úÖ Permisos de notificaci√≥n concedidos')
    }
    
    return Notification.permission === 'granted'
  } else {
    console.error('‚ùå Notification API no disponible')
    return false
  }
}

// Test 5: Probar audio b√°sico
async function testBasicAudio() {
  console.log('\n5Ô∏è‚É£ Probando capacidades de audio...')
  
  if (typeof window !== 'undefined') {
    try {
      // Test Web Audio API
      const audioContext = new (window.AudioContext || window.webkitAudioContext)()
      console.log('üéµ AudioContext disponible, estado:', audioContext.state)
      
      if (audioContext.state === 'suspended') {
        console.log('‚ö†Ô∏è AudioContext suspendido (necesita interacci√≥n del usuario)')
      }
      
      audioContext.close()
      return true
    } catch (err) {
      console.error('‚ùå Error con Web Audio API:', err.message)
      return false
    }
  } else {
    console.log('‚ö†Ô∏è Ejecut√°ndose en Node.js, no se puede probar audio')
    return false
  }
}

// Ejecutar todos los tests
async function runDiagnostic() {
  console.log('üöÄ Iniciando diagn√≥stico completo...\n')
  
  const results = {
    connection: await testBasicConnection(),
    realtime: await testRealtimeSubscription(),
    orderCreation: await testOrderCreationAndTrigger(),
    notifications: await testNotificationPermissions(),
    audio: await testBasicAudio()
  }
  
  console.log('\nüìä RESULTADOS DEL DIAGN√ìSTICO:')
  console.log('========================================')
  console.log('Conexi√≥n b√°sica:', results.connection ? '‚úÖ OK' : '‚ùå FAIL')
  console.log('Realtime:', results.realtime ? '‚úÖ OK' : '‚ùå FAIL')
  console.log('Creaci√≥n orden:', results.orderCreation ? '‚úÖ OK' : '‚ùå FAIL')
  console.log('Permisos notificaci√≥n:', results.notifications ? '‚úÖ OK' : '‚ùå FAIL')
  console.log('Capacidades audio:', results.audio ? '‚úÖ OK' : '‚ùå FAIL')
  
  // Diagn√≥stico del problema
  console.log('\nüîç DIAGN√ìSTICO:')
  if (!results.connection) {
    console.log('üö® PROBLEMA: No hay conexi√≥n con Supabase')
  } else if (!results.realtime) {
    console.log('üö® PROBLEMA: Realtime no est√° funcionando - revisar configuraci√≥n')
  } else if (!results.notifications) {
    console.log('üö® PROBLEMA: Permisos de notificaci√≥n no concedidos')
  } else if (!results.audio) {
    console.log('üö® PROBLEMA: Audio no disponible - requiere interacci√≥n del usuario')
  } else {
    console.log('‚úÖ Todos los componentes b√°sicos funcionan')
    console.log('üîß El problema puede estar en la implementaci√≥n espec√≠fica')
  }
  
  console.log('\nüéØ PR√ìXIMOS PASOS:')
  if (!results.realtime) {
    console.log('1. Verificar configuraci√≥n Realtime en Supabase Dashboard')
    console.log('2. Ejecutar SQL de configuraci√≥n nuevamente')
  }
  if (!results.notifications) {
    console.log('3. Solicitar permisos de notificaci√≥n expl√≠citamente')
  }
  if (!results.audio) {
    console.log('4. Requerir interacci√≥n del usuario antes del primer sonido')
  }
}

// Ejecutar diagn√≥stico
runDiagnostic().catch(console.error)
