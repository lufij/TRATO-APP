-- =====================================================
-- DIAGN√ìSTICO ESTRUCTURA DE √ìRDENES Y PRODUCTOS
-- =====================================================
-- Revisar diferencias entre productos normales y del d√≠a en las √≥rdenes

-- üìä 1. VERIFICAR ESTRUCTURA DE TABLAS CLAVE
SELECT 
    'üìã ESTRUCTURA CART_ITEMS:' as seccion,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'cart_items' AND table_schema = 'public'
ORDER BY ordinal_position;

SELECT 
    'üìã ESTRUCTURA ORDER_ITEMS:' as seccion,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'order_items' AND table_schema = 'public'
ORDER BY ordinal_position;

-- üìä 2. VERIFICAR CAMPOS PRODUCT_TYPE
SELECT 
    'üîç PRODUCT_TYPE EN CART_ITEMS:' as diagnostico,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'cart_items' AND column_name = 'product_type'
        ) THEN 'EXISTE ‚úÖ'
        ELSE 'NO EXISTE ‚ùå'
    END as status;

SELECT 
    'üîç PRODUCT_TYPE EN ORDER_ITEMS:' as diagnostico,
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'order_items' AND column_name = 'product_type'
        ) THEN 'EXISTE ‚úÖ'
        ELSE 'NO EXISTE ‚ùå'
    END as status;

-- üìä 3. VERIFICAR DATOS EXISTENTES
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'cart_items') THEN
        RAISE NOTICE 'üìä CART_ITEMS - Registros por tipo:';
        PERFORM pg_notify('cart_analysis', 'Analyzing cart items...');
    END IF;
    
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'order_items') THEN
        RAISE NOTICE 'üìä ORDER_ITEMS - Revisando estructura...';
        PERFORM pg_notify('order_analysis', 'Analyzing order items...');
    END IF;
END $$;

-- üìä 4. VERIFICAR CART_ITEMS CON PRODUCT_TYPE
SELECT 
    'üõí CART_ITEMS por tipo:' as categoria,
    COALESCE(product_type, 'SIN_TIPO') as tipo_producto,
    COUNT(*) as cantidad,
    STRING_AGG(DISTINCT seller_id::text, ', ') as vendedores
FROM cart_items 
GROUP BY product_type
ORDER BY cantidad DESC;

-- üìä 5. VERIFICAR √ìRDENES EXISTENTES
SELECT 
    'üì¶ √ìRDENES por estado:' as categoria,
    status,
    COUNT(*) as cantidad,
    AVG(total) as promedio_total
FROM orders 
GROUP BY status
ORDER BY cantidad DESC;

-- üìä 6. VERIFICAR RELACI√ìN PRODUCTOS - √ìRDENES
SELECT 
    'üîó ORDEN_ITEMS:' as categoria,
    COUNT(*) as total_items,
    COUNT(DISTINCT order_id) as ordenes_distintas,
    COUNT(DISTINCT product_id) as productos_distintos,
    AVG(price) as precio_promedio
FROM order_items;

-- üìä 7. VERIFICAR FUNCIONAMIENTO DE PRODUCTOS DEL D√çA
SELECT 
    'üî• PRODUCTOS DEL D√çA:' as categoria,
    COUNT(*) as total_productos,
    COUNT(CASE WHEN expires_at > NOW() THEN 1 END) as disponibles,
    COUNT(CASE WHEN expires_at <= NOW() THEN 1 END) as expirados,
    COUNT(CASE WHEN stock_quantity > 0 THEN 1 END) as con_stock
FROM daily_products;

-- üìä 8. PROBLEMA ESPEC√çFICO - ACTUALIZACI√ìN DE √ìRDENES
SELECT 
    '‚ö†Ô∏è DIAGN√ìSTICO UPDATEORDERSTATUS:' as problema,
    'Verificando si existe la funci√≥n' as descripcion;

-- Verificar funci√≥n update_order_status
SELECT 
    'üîß FUNCI√ìN UPDATE_ORDER_STATUS:' as verificacion,
    routine_name,
    routine_type,
    specific_name
FROM information_schema.routines 
WHERE routine_name LIKE '%update_order%' 
AND routine_schema = 'public';

-- üìä 9. VERIFICAR PERMISOS Y POL√çTICAS RLS
SELECT 
    'üîí POL√çTICAS RLS ORDERS:' as seccion,
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual
FROM pg_policies 
WHERE tablename = 'orders';

SELECT 
    'üîí POL√çTICAS RLS ORDER_ITEMS:' as seccion,
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual
FROM pg_policies 
WHERE tablename = 'order_items';

-- üìä 10. RECOMENDACIONES
SELECT 
    'üí° RECOMENDACIONES:' as conclusion,
    CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM information_schema.columns 
            WHERE table_name = 'order_items' AND column_name = 'product_type'
        ) 
        THEN 'AGREGAR product_type a order_items para distinguir productos normales vs del d√≠a'
        ELSE 'order_items ya tiene product_type ‚úÖ'
    END as recomendacion_1,
    CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM information_schema.routines 
            WHERE routine_name = 'update_order_status' AND routine_schema = 'public'
        )
        THEN 'CREAR funci√≥n update_order_status para manejar estados de √≥rdenes'
        ELSE 'Funci√≥n update_order_status existe ‚úÖ'
    END as recomendacion_2;
