#!/usr/bin/env node

/**
 * üöÄ SCRIPT DE CONFIGURACI√ìN AUTOM√ÅTICA PARA VS CODE
 * 
 * Este script instala y configura autom√°ticamente todas las extensiones
 * y configuraciones necesarias para desarrollar TRATO de manera √≥ptima.
 */

import { execSync } from 'child_process';
import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log(`
üöÄ ========================================
   CONFIGURACI√ìN AUTOM√ÅTICA VS CODE TRATO
   ========================================
`);

// Extensiones requeridas para TRATO
const requiredExtensions = [
  'ms-vscode.vscode-typescript-next',
  'bradlc.vscode-tailwindcss', 
  'esbenp.prettier-vscode',
  'ms-vscode.vscode-eslint',
  'dsznajder.es7-react-js-snippets',
  'formulahendry.auto-rename-tag',
  'PKief.material-icon-theme',
  'aaron-bond.better-comments',
  'usernamehw.errorlens',
  'eamodio.gitlens',
  'GitHub.vscode-pull-request-github',
  'ms-vscode.vscode-color-picker',
  'streetsidesoftware.code-spell-checker',
  'yzhang.markdown-all-in-one'
];

// Funci√≥n para ejecutar comando y manejar errores
function execCommand(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    execSync(command, { stdio: 'pipe' });
    console.log(`‚úÖ ${description} completado`);
    return true;
  } catch (error) {
    console.log(`‚ö†Ô∏è ${description} fall√≥: ${error.message}`);
    return false;
  }
}

// Funci√≥n para verificar si una extensi√≥n est√° instalada
function isExtensionInstalled(extensionId) {
  try {
    const output = execSync(`code --list-extensions`, { encoding: 'utf8' });
    return output.includes(extensionId);
  } catch (error) {
    return false;
  }
}

// Funci√≥n para instalar extensiones de VS Code
function installExtensions() {
  console.log('\nüì¶ INSTALANDO EXTENSIONES DE VS CODE');
  console.log('=====================================');
  
  let installed = 0;
  let skipped = 0;
  let failed = 0;
  
  for (const extension of requiredExtensions) {
    if (isExtensionInstalled(extension)) {
      console.log(`‚úÖ ${extension} ya est√° instalada`);
      skipped++;
    } else {
      const success = execCommand(
        `code --install-extension ${extension}`,
        `Instalando ${extension}`
      );
      if (success) {
        installed++;
      } else {
        failed++;
      }
    }
  }
  
  console.log(`\nüìä RESUMEN DE EXTENSIONES:`);
  console.log(`   ‚úÖ Instaladas: ${installed}`);
  console.log(`   ‚è≠Ô∏è Ya exist√≠an: ${skipped}`);
  console.log(`   ‚ùå Fallaron: ${failed}`);
}

// Funci√≥n para instalar dependencias npm
function installDependencies() {
  console.log('\nüì¶ INSTALANDO DEPENDENCIAS NPM');
  console.log('===============================');
  
  const devDependencies = [
    '@typescript-eslint/eslint-plugin@^8.15.0',
    '@typescript-eslint/parser@^8.15.0',
    'eslint@^9.15.0',
    'eslint-config-prettier@^9.1.0',
    'eslint-plugin-import@^2.31.0',
    'eslint-plugin-jsx-a11y@^6.10.2',
    'eslint-plugin-prettier@^5.2.1',
    'eslint-plugin-react@^7.37.2',
    'eslint-plugin-react-hooks@^5.0.0',
    'prettier@^3.3.3',
    '@tailwindcss/forms@^0.5.9',
    '@tailwindcss/typography@^0.5.15',
    '@tailwindcss/aspect-ratio@^0.4.2'
  ];
  
  console.log(`üîÑ Instalando ${devDependencies.length} dependencias de desarrollo...`);
  
  try {
    execSync(`npm install --save-dev ${devDependencies.join(' ')}`, { 
      stdio: 'inherit' 
    });
    console.log('‚úÖ Dependencias de desarrollo instaladas correctamente');
  } catch (error) {
    console.log('‚ö†Ô∏è Error instalando dependencias de desarrollo');
    console.log('   Puedes instalarlas manualmente con:');
    console.log(`   npm install --save-dev ${devDependencies.join(' ')}`);
  }
}

// Funci√≥n para verificar configuraci√≥n
function verifySetup() {
  console.log('\nüîç VERIFICANDO CONFIGURACI√ìN');
  console.log('============================');
  
  const files = [
    '.vscode/settings.json',
    '.vscode/extensions.json', 
    '.vscode/tasks.json',
    '.vscode/launch.json',
    '.prettierrc.json',
    '.eslintrc.json',
    'tailwind.config.js'
  ];
  
  let allGood = true;
  
  for (const file of files) {
    if (existsSync(file)) {
      console.log(`‚úÖ ${file} configurado`);
    } else {
      console.log(`‚ùå ${file} faltante`);
      allGood = false;
    }
  }
  
  if (allGood) {
    console.log('\nüéâ ¬°Toda la configuraci√≥n est√° lista!');
  } else {
    console.log('\n‚ö†Ô∏è Algunos archivos de configuraci√≥n faltan');
    console.log('   Aseg√∫rate de que todos los archivos .vscode/* existan');
  }
}

// Funci√≥n para mostrar instrucciones finales
function showFinalInstructions() {
  console.log(`
üéØ ¬°CONFIGURACI√ìN COMPLETADA!
=============================

Tu entorno de desarrollo TRATO est√° listo. Pr√≥ximos pasos:

1Ô∏è‚É£ REINICIA VS CODE
   - Cierra completamente VS Code
   - Vuelve a abrirlo desde la terminal con: code .

2Ô∏è‚É£ VERIFICA EXTENSIONES
   - Ve a Extensions (Ctrl+Shift+X)
   - Deber√≠as ver las extensiones de TRATO instaladas

3Ô∏è‚É£ EJECUTA EL PROYECTO
   - Abre terminal: Ctrl+Shift+\`
   - Ejecuta: npm run dev
   - O usa: Ctrl+Shift+P ‚Üí "Tasks: Run Task" ‚Üí "üöÄ Desarrollo"

4Ô∏è‚É£ DISFRUTA DE LAS NUEVAS FUNCIONES
   ‚ú® Formateo autom√°tico al guardar
   üé® IntelliSense de Tailwind con colores
   üîç Errores inline con Error Lens
   üìù Snippets personalizados (trc, trcard, trbtn, etc.)
   üéØ Tasks personalizados para desarrollo

5Ô∏è‚É£ ATAJOS √öTILES
   - trc + Tab: Componente React r√°pido
   - F5: Debug en Chrome
   - Ctrl+Shift+P: Paleta de comandos

üìö LEE LA DOCUMENTACI√ìN
   - Consulta .vscode/README_DESARROLLO.md para todos los detalles
   - Lista completa de snippets y comandos disponible

üéâ ¬°A desarrollar TRATO con estilo profesional! üöÄ
`);
}

// Ejecutar script principal
async function main() {
  try {
    // Verificar que VS Code est√© instalado
    try {
      execSync('code --version', { stdio: 'pipe' });
      console.log('‚úÖ Visual Studio Code detectado');
    } catch (error) {
      console.log('‚ùå Visual Studio Code no est√° instalado o no est√° en PATH');
      console.log('   Instala VS Code desde: https://code.visualstudio.com/');
      process.exit(1);
    }
    
    // Instalar extensiones
    installExtensions();
    
    // Instalar dependencias
    installDependencies();
    
    // Verificar configuraci√≥n
    verifySetup();
    
    // Mostrar instrucciones finales
    showFinalInstructions();
    
  } catch (error) {
    console.error(`‚ùå Error durante la configuraci√≥n: ${error.message}`);
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { installExtensions, installDependencies, verifySetup };