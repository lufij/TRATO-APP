// üîç DIAGN√ìSTICO DE PERMISOS DE NOTIFICACI√ìN
// Ejecutar en la consola del navegador para verificar estado completo

console.log('üîç === DIAGN√ìSTICO DE PERMISOS DE NOTIFICACI√ìN ===');

// 1. Verificar soporte del navegador
console.log('\nüì± SOPORTE DEL NAVEGADOR:');
console.log('- Notificaciones disponibles:', 'Notification' in window);
console.log('- Web Audio API:', 'AudioContext' in window || 'webkitAudioContext' in window);
console.log('- API de Vibraci√≥n:', 'vibrate' in navigator);
console.log('- Service Workers:', 'serviceWorker' in navigator);

// 2. Estado actual de permisos
if ('Notification' in window) {
  console.log('\nüîî ESTADO DE PERMISOS:');
  console.log('- Permiso actual:', Notification.permission);
  
  switch (Notification.permission) {
    case 'granted':
      console.log('‚úÖ PERMISOS CONCEDIDOS - Las notificaciones funcionar√°n');
      break;
    case 'denied':
      console.log('‚ùå PERMISOS BLOQUEADOS - Necesita reactivar manualmente');
      console.log('   üëâ Soluci√≥n: Clic en candado URL ‚Üí Notificaciones ‚Üí Permitir ‚Üí Recargar');
      break;
    case 'default':
      console.log('‚ö†Ô∏è PERMISOS PENDIENTES - Necesita solicitar permisos');
      console.log('   üëâ Soluci√≥n: Clic en "Activar Notificaciones" en la app');
      break;
  }
} else {
  console.log('\n‚ùå NOTIFICACIONES NO SOPORTADAS en este navegador');
}

// 3. Verificar contexto de audio
console.log('\nüîä ESTADO DE AUDIO:');
try {
  if ('AudioContext' in window || 'webkitAudioContext' in window) {
    const AudioContextClass = window.AudioContext || window.webkitAudioContext;
    console.log('‚úÖ Web Audio API disponible');
    console.log('- Clase AudioContext:', AudioContextClass.name);
  } else {
    console.log('‚ùå Web Audio API no disponible');
  }
} catch (error) {
  console.log('‚ùå Error verificando Audio Context:', error.message);
}

// 4. Verificar vibraci√≥n
console.log('\nüì≥ VIBRACI√ìN:');
if ('vibrate' in navigator) {
  console.log('‚úÖ API de vibraci√≥n disponible (m√≥vil)');
} else {
  console.log('‚ùå API de vibraci√≥n no disponible (probable desktop)');
}

// 5. Verificar listeners de eventos
console.log('\nüëÇ LISTENERS DE EVENTOS:');
const hasEventListeners = window.addEventListener && typeof window.addEventListener === 'function';
console.log('- addEventListener disponible:', hasEventListeners);

// 6. Informaci√≥n del navegador
console.log('\nüåê INFORMACI√ìN DEL NAVEGADOR:');
console.log('- User Agent:', navigator.userAgent);
console.log('- Plataforma:', navigator.platform);
console.log('- Online:', navigator.onLine);

// 7. Test de notificaci√≥n (solo si hay permisos)
if ('Notification' in window && Notification.permission === 'granted') {
  console.log('\nüß™ EJECUTANDO TEST DE NOTIFICACI√ìN...');
  try {
    const testNotification = new Notification('üß™ Test de Notificaci√≥n', {
      body: 'Si ves esta notificaci√≥n, el sistema est√° funcionando correctamente',
      icon: '/favicon.ico',
      badge: '/favicon.ico',
      tag: 'diagnostic-test'
    });
    
    testNotification.onclick = () => {
      console.log('‚úÖ Notificaci√≥n clickeada - Interacci√≥n funcionando');
      testNotification.close();
    };
    
    setTimeout(() => {
      testNotification.close();
    }, 5000);
    
    console.log('‚úÖ Notificaci√≥n de prueba enviada');
  } catch (error) {
    console.log('‚ùå Error enviando notificaci√≥n de prueba:', error.message);
  }
}

// 8. Test de sonido (requiere interacci√≥n del usuario)
console.log('\nüîä PARA PROBAR SONIDO:');
console.log('Ejecuta: testNotificationSound()');

window.testNotificationSound = function() {
  console.log('üîä Probando sonido de notificaci√≥n...');
  
  try {
    const AudioContextClass = window.AudioContext || window.webkitAudioContext;
    const audioContext = new AudioContextClass();
    
    // Crear secuencia de tonos como en la app
    const playTone = (frequency, duration, delay = 0) => {
      setTimeout(() => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + duration);
      }, delay);
    };
    
    // Secuencia de notificaci√≥n: tres tonos ascendentes
    playTone(800, 0.2, 0);
    playTone(1000, 0.2, 300);
    playTone(1200, 0.3, 600);
    
    console.log('‚úÖ Sonido de prueba reproducido');
    
    // Test de vibraci√≥n tambi√©n
    if ('vibrate' in navigator) {
      navigator.vibrate([300, 100, 300, 100, 300]);
      console.log('‚úÖ Vibraci√≥n de prueba activada');
    }
    
  } catch (error) {
    console.log('‚ùå Error reproduciendo sonido:', error.message);
  }
};

// 9. Test de evento personalizado
console.log('\nüì° PARA PROBAR EVENTO PERSONALIZADO:');
console.log('Ejecuta: testCriticalNotificationEvent()');

window.testCriticalNotificationEvent = function() {
  console.log('üì° Probando evento cr√≠tico...');
  
  const event = new CustomEvent('criticalNotification', {
    detail: {
      type: 'new_order',
      message: 'Pedido de prueba #TEST-12345 por $25.000',
      data: {
        orderId: 'test-12345',
        amount: 25000,
        buyer: 'Cliente de Prueba',
        timestamp: new Date().toISOString()
      }
    }
  });
  
  window.dispatchEvent(event);
  console.log('‚úÖ Evento de prueba enviado');
  console.log('   Si no escuchas sonido o ves notificaci√≥n, verifica que:');
  console.log('   1. El componente CriticalNotifications est√© montado');
  console.log('   2. Los event listeners est√©n activos');
  console.log('   3. Los permisos est√©n concedidos');
};

console.log('\nüéØ === RESUMEN ===');
console.log('Para que las notificaciones funcionen completamente necesitas:');
console.log('1. ‚úÖ Permisos de notificaci√≥n: "granted"');
console.log('2. ‚úÖ Interacci√≥n del usuario (para activar audio)');
console.log('3. ‚úÖ Componente CriticalNotifications montado');
console.log('4. ‚úÖ Event listeners activos');
console.log('\nüß™ COMANDOS DE PRUEBA DISPONIBLES:');
console.log('- testNotificationSound() - Probar sonido');
console.log('- testCriticalNotificationEvent() - Probar evento completo');
console.log('\nüîî Si ves errores, revisa la configuraci√≥n del navegador y permisos.');
