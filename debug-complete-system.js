// üîç SCRIPT DE VERIFICACI√ìN COMPLETA
// Ejecutar en la consola del navegador para diagnosticar todos los problemas

console.log('üîç === DIAGN√ìSTICO COMPLETO DEL SISTEMA ===');

// 1. Verificar variables de entorno
console.log('\nüîß VARIABLES DE ENTORNO:');
console.log('- VITE_SUPABASE_URL:', import.meta.env.VITE_SUPABASE_URL || 'NO DEFINIDA');
console.log('- VITE_SUPABASE_ANON_KEY:', import.meta.env.VITE_SUPABASE_ANON_KEY ? 'DEFINIDA' : 'NO DEFINIDA');

// 2. Verificar configuraci√≥n de Supabase
console.log('\nüì° CONFIGURACI√ìN SUPABASE:');
if (typeof supabase !== 'undefined') {
  console.log('‚úÖ Cliente Supabase disponible');
  console.log('- URL en uso:', supabase.supabaseUrl);
  console.log('- Key en uso:', supabase.supabaseKey ? 'PRESENTE' : 'AUSENTE');
} else {
  console.log('‚ùå Cliente Supabase NO disponible');
}

// 3. Test de conectividad
console.log('\nüîó PROBANDO CONECTIVIDAD...');

// Test drivers
if (typeof supabase !== 'undefined') {
  supabase.from('drivers').select('id, is_online, is_active').limit(3)
    .then(({ data, error }) => {
      if (error) {
        console.log('‚ùå Error consultando drivers:', error.message);
        console.log('   Detalles:', error);
      } else {
        console.log('‚úÖ Drivers consultados exitosamente:', data?.length || 0);
        data?.forEach((driver, i) => {
          console.log(`   ${i+1}. Online: ${driver.is_online}, Active: ${driver.is_active}`);
        });
      }
    });

  // Test count online drivers
  setTimeout(() => {
    supabase.from('drivers').select('id', { count: 'exact', head: true }).eq('is_online', true)
      .then(({ count, error }) => {
        if (error) {
          console.log('‚ùå Error contando drivers online:', error.message);
        } else {
          console.log('‚úÖ Drivers online encontrados:', count);
        }
      });
  }, 1000);

  // Test users table
  setTimeout(() => {
    supabase.from('users').select('id, role', { count: 'exact', head: true })
      .then(({ count, error }) => {
        if (error) {
          console.log('‚ùå Error consultando users:', error.message);
        } else {
          console.log('‚úÖ Usuarios en sistema:', count);
        }
      });
  }, 1500);
}

// 4. Verificar permisos de notificaci√≥n
console.log('\nüîî PERMISOS DE NOTIFICACI√ìN:');
if ('Notification' in window) {
  console.log('- Estado actual:', Notification.permission);
  console.log('- Soporte disponible: ‚úÖ');
  
  switch (Notification.permission) {
    case 'granted':
      console.log('‚úÖ PERMISOS CONCEDIDOS - Notificaciones funcionar√°n');
      break;
    case 'denied':
      console.log('‚ùå PERMISOS BLOQUEADOS - Necesita reactivar manualmente');
      break;
    case 'default':
      console.log('‚ö†Ô∏è PERMISOS PENDIENTES - Clic en "Activar Notificaciones"');
      break;
  }
} else {
  console.log('‚ùå Notificaciones NO soportadas en este navegador');
}

// 5. Verificar contexto de audio
console.log('\nüîä CAPACIDADES DE AUDIO:');
console.log('- Web Audio API:', 'AudioContext' in window || 'webkitAudioContext' in window ? '‚úÖ' : '‚ùå');
console.log('- Vibraci√≥n:', 'vibrate' in navigator ? '‚úÖ' : '‚ùå');

// 6. Test de componentes React
console.log('\n‚öõÔ∏è COMPONENTES REACT:');
console.log('- CriticalNotifications montado:', document.querySelector('[data-component="critical-notifications"]') ? '‚úÖ' : '‚ùì');
console.log('- Event listeners activos:', typeof window.addEventListener === 'function' ? '‚úÖ' : '‚ùå');

// 7. Test de red
console.log('\nüåê CONECTIVIDAD:');
console.log('- Online:', navigator.onLine ? '‚úÖ' : '‚ùå');
console.log('- Protocolo:', window.location.protocol);
console.log('- Host:', window.location.host);

// 8. Funciones de test disponibles
console.log('\nüß™ FUNCIONES DE PRUEBA DISPONIBLES:');
console.log('Ejecuta estas funciones para probar:');

// Funci√≥n para probar notificaci√≥n
window.testNotificationFlow = function() {
  console.log('üß™ Probando flujo completo de notificaci√≥n...');
  
  // Simular evento cr√≠tico
  const event = new CustomEvent('criticalNotification', {
    detail: {
      type: 'new_order',
      message: 'PRUEBA: Nuevo pedido #12345 por $25.000',
      data: {
        orderId: 'test-12345',
        amount: 25000,
        buyer: 'Cliente de Prueba'
      }
    }
  });
  
  window.dispatchEvent(event);
  console.log('‚úÖ Evento enviado - Deber√≠as escuchar sonido y ver notificaci√≥n');
};

// Funci√≥n para solicitar permisos
window.requestNotificationPermission = function() {
  if ('Notification' in window) {
    Notification.requestPermission().then(permission => {
      console.log('üîî Permisos actualizados a:', permission);
      if (permission === 'granted') {
        new Notification('¬°Permisos Activados!', {
          body: 'Las notificaciones ahora funcionar√°n correctamente'
        });
      }
    });
  }
};

// Funci√≥n para probar drivers directamente
window.testDriversQuery = function() {
  if (typeof supabase !== 'undefined') {
    console.log('üîç Probando consulta directa de drivers...');
    supabase.from('drivers').select('*')
      .then(({ data, error }) => {
        if (error) {
          console.log('‚ùå Error:', error);
        } else {
          console.log('‚úÖ Drivers encontrados:', data);
        }
      });
  }
};

console.log('\nüéØ COMANDOS DISPONIBLES:');
console.log('- testNotificationFlow() - Probar notificaci√≥n completa');
console.log('- requestNotificationPermission() - Solicitar permisos');
console.log('- testDriversQuery() - Probar consulta de drivers');

console.log('\nüìã RESUMEN:');
console.log('Si ves errores 400, el problema probablemente es:');
console.log('1. Variables de entorno no cargadas correctamente');
console.log('2. Configuraci√≥n RLS de Supabase');
console.log('3. Problemas de autenticaci√≥n');
