// üîî CONFIGURACI√ìN CR√çTICA PARA NOTIFICACIONES CON PANTALLA APAGADA

class NotificationPowerManager {
  constructor() {
    this.wakeLock = null;
    this.isVendor = false;
    this.soundEnabled = false;
  }

  // üöÄ INICIALIZAR TODO EL SISTEMA
  async initialize(userRole = null) {
    console.log('üîî Iniciando sistema de notificaciones cr√≠ticas...');
    
    this.isVendor = userRole === 'vendedor';
    
    try {
      // 1. Registrar Service Worker si no existe
      await this.registerServiceWorker();
      
      // 2. Solicitar permisos cr√≠ticos
      await this.requestCriticalPermissions();
      
      // 3. Activar Wake Lock para vendedores
      if (this.isVendor) {
        await this.activateWakeLock();
      }
      
      // 4. Configurar optimizaciones m√≥viles
      await this.setupMobileOptimizations();
      
      console.log('‚úÖ Sistema de notificaciones cr√≠ticas completamente configurado');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error configurando sistema de notificaciones:', error);
      return false;
    }
  }

  // üì± REGISTRAR SERVICE WORKER
  async registerServiceWorker() {
    if ('serviceWorker' in navigator) {
      try {
        const registration = await navigator.serviceWorker.register('/sw.js', {
          scope: '/',
          updateViaCache: 'none' // Siempre verificar actualizaciones
        });
        
        console.log('‚úÖ Service Worker registrado:', registration.scope);
        
        // Verificar si hay actualizaciones
        if (registration.waiting) {
          registration.waiting.postMessage({ command: 'skipWaiting' });
        }
        
        return registration;
      } catch (error) {
        console.error('‚ùå Error registrando Service Worker:', error);
        throw error;
      }
    } else {
      throw new Error('Service Workers no soportados');
    }
  }

  // üîê SOLICITAR PERMISOS CR√çTICOS
  async requestCriticalPermissions() {
    const permissions = [];
    
    // 1. Permisos de notificaci√≥n
    if ('Notification' in window) {
      if (Notification.permission === 'default') {
        const permission = await Notification.requestPermission();
        permissions.push(`Notificaciones: ${permission}`);
      } else {
        permissions.push(`Notificaciones: ${Notification.permission}`);
      }
      
      if (Notification.permission === 'granted') {
        this.soundEnabled = true;
      }
    }
    
    // 2. Permisos de audio (para sonidos fuertes)
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      await audioContext.resume();
      permissions.push('Audio: granted');
      audioContext.close();
    } catch (error) {
      permissions.push('Audio: denied');
    }
    
    console.log('üîê Permisos obtenidos:', permissions);
    return permissions;
  }

  // üîã ACTIVAR WAKE LOCK (solo vendedores)
  async activateWakeLock() {
    if ('wakeLock' in navigator && this.isVendor) {
      try {
        this.wakeLock = await navigator.wakeLock.request('screen');
        console.log('üîã Wake Lock ACTIVADO - Pantalla permanecer√° activa');
        
        this.wakeLock.addEventListener('release', () => {
          console.log('‚ö†Ô∏è Wake Lock liberado');
        });
        
        // Reactivar autom√°ticamente si se pierde
        document.addEventListener('visibilitychange', async () => {
          if (!document.hidden && !this.wakeLock) {
            try {
              this.wakeLock = await navigator.wakeLock.request('screen');
              console.log('üîÑ Wake Lock reactivado');
            } catch (error) {
              console.error('‚ùå Error reactivando Wake Lock:', error);
            }
          }
        });
        
        return true;
      } catch (error) {
        console.error('‚ùå Error activando Wake Lock:', error);
        return false;
      }
    }
    return false;
  }

  // üì± OPTIMIZACIONES M√ìVILES
  async setupMobileOptimizations() {
    // 1. Prevenir modo de ahorro de bater√≠a
    if ('getBattery' in navigator) {
      try {
        const battery = await navigator.getBattery();
        if (battery.charging) {
          console.log('üîã Dispositivo conectado a cargador - √ìptimo para notificaciones');
        } else {
          console.log('‚ö†Ô∏è IMPORTANTE: Conecta el dispositivo al cargador para mejores notificaciones');
        }
      } catch (error) {
        console.log('üîã Info de bater√≠a no disponible');
      }
    }
    
    // 2. Configurar meta tags para PWA
    this.setupPWAMeta();
    
    // 3. Instrucciones espec√≠ficas por navegador
    this.showBrowserSpecificInstructions();
  }

  // üåê CONFIGURAR META TAGS PWA
  setupPWAMeta() {
    const metas = [
      { name: 'mobile-web-app-capable', content: 'yes' },
      { name: 'apple-mobile-web-app-capable', content: 'yes' },
      { name: 'apple-mobile-web-app-status-bar-style', content: 'default' },
      { name: 'theme-color', content: '#f97316' }
    ];
    
    metas.forEach(meta => {
      let element = document.querySelector(`meta[name="${meta.name}"]`);
      if (!element) {
        element = document.createElement('meta');
        element.name = meta.name;
        document.head.appendChild(element);
      }
      element.content = meta.content;
    });
  }

  // üìñ MOSTRAR INSTRUCCIONES POR NAVEGADOR
  showBrowserSpecificInstructions() {
    const isAndroid = /Android/i.test(navigator.userAgent);
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isChrome = /Chrome/i.test(navigator.userAgent);
    
    if (this.isVendor) {
      let instructions = 'üì± CONFIGURACIONES CR√çTICAS PARA VENDEDORES:\n\n';
      
      if (isAndroid && isChrome) {
        instructions += `
ü§ñ ANDROID + CHROME:
‚Ä¢ Configuraci√≥n > Aplicaciones > Chrome > Bater√≠a
‚Ä¢ Seleccionar "No optimizar" o "Sin restricciones"
‚Ä¢ Configuraci√≥n > Sonidos > Volumen de notificaciones = M√ÅXIMO
‚Ä¢ Mantener pantalla encendida mientras usas la app
        `;
      } else if (isIOS) {
        instructions += `
üçé iPhone/iPad:
‚Ä¢ Configuraci√≥n > Notificaciones > Chrome/Safari
‚Ä¢ Activar "Permitir notificaciones"
‚Ä¢ Configuraci√≥n > Sonidos > Volumen = M√ÅXIMO
‚Ä¢ Configuraci√≥n > Pantalla > Bloqueo autom√°tico = Nunca (mientras trabajas)
        `;
      }
      
      instructions += `
üîä SONIDOS M√ÅS FUERTES:
‚Ä¢ Usar auriculares o parlantes externos
‚Ä¢ Volumen del dispositivo = M√ÅXIMO
‚Ä¢ No usar modo silencioso
‚Ä¢ Probar con: testNotifications.playLoudSound()
      `;
      
      console.log(instructions);
    }
  }

  // üîä PROBAR SONIDO FUERTE
  async playLoudSound() {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      await audioContext.resume();
      
      const playTone = (frequency, duration, delay = 0) => {
        setTimeout(() => {
          const oscillator = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          
          oscillator.connect(gainNode);
          gainNode.connect(audioContext.destination);
          
          oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
          oscillator.type = 'square'; // Sonido m√°s fuerte
          gainNode.gain.setValueAtTime(1.0, audioContext.currentTime); // Volumen m√°ximo
          gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);
          
          oscillator.start(audioContext.currentTime);
          oscillator.stop(audioContext.currentTime + duration / 1000);
        }, delay);
      };
      
      // Triple beep FUERTE
      playTone(800, 500, 0);
      playTone(1000, 500, 400);
      playTone(1200, 700, 800);
      
      // Vibraci√≥n intensa
      if ('vibrate' in navigator) {
        navigator.vibrate([300, 100, 300, 100, 300, 100, 500]);
      }
      
      console.log('üîä Sonido de prueba reproducido');
    } catch (error) {
      console.error('‚ùå Error reproduciendo sonido:', error);
    }
  }

  // üìä DIAGN√ìSTICO COMPLETO
  diagnose() {
    const report = {
      serviceWorker: 'serviceWorker' in navigator,
      notifications: 'Notification' in window,
      notificationPermission: Notification?.permission,
      wakeLock: 'wakeLock' in navigator,
      vibration: 'vibrate' in navigator,
      audioContext: !!(window.AudioContext || window.webkitAudioContext),
      isSecureContext: window.isSecureContext,
      wakeLockActive: !!this.wakeLock,
      soundEnabled: this.soundEnabled,
      userAgent: navigator.userAgent
    };
    
    console.table(report);
    return report;
  }
}

// üöÄ CREAR INSTANCIA GLOBAL
window.notificationPowerManager = new NotificationPowerManager();

// üß™ FUNCIONES DE PRUEBA
window.testNotifications = {
  // Configurar sistema completo
  async setup(userRole = 'vendedor') {
    return await window.notificationPowerManager.initialize(userRole);
  },
  
  // Reproducir sonido fuerte
  async playLoudSound() {
    return await window.notificationPowerManager.playLoudSound();
  },
  
  // Diagn√≥stico completo
  diagnose() {
    return window.notificationPowerManager.diagnose();
  },
  
  // Instrucciones de uso
  help() {
    console.log(`
üîî COMANDOS DISPONIBLES:

‚Ä¢ testNotifications.setup('vendedor') - Configurar sistema completo
‚Ä¢ testNotifications.playLoudSound() - Probar sonido fuerte
‚Ä¢ testNotifications.diagnose() - Ver estado del sistema
‚Ä¢ testNotifications.help() - Ver esta ayuda

üì± PARA VENDEDORES:
1. Ejecutar: testNotifications.setup('vendedor')
2. Permitir TODOS los permisos que se soliciten
3. Configurar dispositivo seg√∫n las instrucciones mostradas
4. Probar con: testNotifications.playLoudSound()
    `);
  }
};

// üéØ AUTO-INICIALIZACI√ìN para vendedores
document.addEventListener('DOMContentLoaded', () => {
  // Detectar si es vendedor (puedes personalizar esta l√≥gica)
  const isSellerPage = window.location.pathname.includes('/seller') || 
                       window.location.hash.includes('seller');
  
  if (isSellerPage) {
    console.log('üõí P√°gina de vendedor detectada - Inicializando sistema cr√≠tico...');
    setTimeout(() => {
      window.testNotifications.setup('vendedor');
    }, 2000);
  }
});

console.log('üîî Sistema de notificaciones cr√≠ticas cargado - Ejecuta testNotifications.help() para instrucciones');
