// DEBUG ESPEC√çFICO PARA EL PROBLEMA DE √ìRDENES QUE NO SE ACTUALIZAN
// ===================================================================
// Ejecutar en la consola del navegador para diagnosticar el problema

console.log('üîç DEBUG ESPEC√çFICO - PROBLEMA DE √ìRDENES');
console.log('==========================================');

// Funci√≥n para obtener informaci√≥n detallada de la orden problem√°tica
async function debugOrdenEspecifica() {
    try {
        console.log('üìã OBTENIENDO INFORMACI√ìN DETALLADA...');
        
        // Obtener usuario actual
        const { data: { user } } = await supabase.auth.getUser();
        console.log('üë§ Usuario actual:', user?.id);
        
        // Obtener TODAS las √≥rdenes sin filtros
        const { data: todasOrdenes, error: errorTodas } = await supabase
            .from('orders')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(20);

        if (errorTodas) {
            console.error('‚ùå Error cargando todas las √≥rdenes:', errorTodas);
            return;
        }

        console.log(`üì¶ Total de √≥rdenes encontradas: ${todasOrdenes?.length || 0}`);
        
        // Mostrar todas las √≥rdenes con detalles
        todasOrdenes?.forEach((orden, index) => {
            console.log(`\nüìã ORDEN ${index + 1}:`);
            console.log('   ID:', orden.id);
            console.log('   N√∫mero:', orden.order_number);
            console.log('   Status REAL:', orden.status);
            console.log('   Seller ID:', orden.seller_id || 'NULL');
            console.log('   Buyer ID:', orden.buyer_id);
            console.log('   Created:', orden.created_at);
            console.log('   Accepted:', orden.accepted_at || 'NULL');
            console.log('   Ready:', orden.ready_at || 'NULL');
            console.log('   Delivery Type:', orden.delivery_type || orden.delivery_method || 'NULL');
            console.log('   Total:', `Q${orden.total}`);
            
            // Detectar inconsistencias
            const problemas = [];
            if (orden.status === 'accepted' && !orden.accepted_at) {
                problemas.push('Estado accepted pero sin timestamp accepted_at');
            }
            if (orden.status === 'ready' && !orden.ready_at) {
                problemas.push('Estado ready pero sin timestamp ready_at');
            }
            if (orden.status === 'pending' && orden.accepted_at) {
                problemas.push('Estado pending pero con timestamp accepted_at');
            }
            if (!orden.seller_id && orden.status !== 'pending') {
                problemas.push('Sin seller_id asignado');
            }
            
            if (problemas.length > 0) {
                console.log('   ‚ö†Ô∏è  PROBLEMAS DETECTADOS:');
                problemas.forEach(problema => console.log(`      - ${problema}`));
            }
        });

        // Buscar la orden que est√° causando problemas
        const ordenProblematica = todasOrdenes?.find(o => 
            o.order_number === '3 sep 2025-02:09 p. m.' || 
            (o.status === 'pending' && o.accepted_at)
        );

        if (ordenProblematica) {
            console.log('\nüéØ ORDEN PROBLEM√ÅTICA IDENTIFICADA:');
            console.log('=====================================');
            console.log('ID:', ordenProblematica.id);
            console.log('Esta es la funci√≥n para probar:', `probarAceptar("${ordenProblematica.id}")`);
            
            // Probar la funci√≥n directamente aqu√≠
            console.log('\nüß™ PROBANDO FUNCI√ìN seller_accept_order DIRECTAMENTE...');
            
            const { data: resultado, error: errorRPC } = await supabase.rpc('seller_accept_order', {
                p_order_id: ordenProblematica.id,
                p_seller_id: user.id
            });

            console.log('üìä Resultado RPC:', resultado);
            if (errorRPC) {
                console.error('‚ùå Error RPC:', errorRPC);
            }

            // Verificar si cambi√≥ despu√©s de 2 segundos
            setTimeout(async () => {
                console.log('\nüîç VERIFICANDO CAMBIOS EN LA BD...');
                const { data: ordenVerificada } = await supabase
                    .from('orders')
                    .select('*')
                    .eq('id', ordenProblematica.id)
                    .single();

                console.log('üìã Estado despu√©s de RPC:');
                console.log('   Status:', ordenVerificada?.status);
                console.log('   Accepted_at:', ordenVerificada?.accepted_at);
                console.log('   Seller_id:', ordenVerificada?.seller_id);

                if (ordenVerificada?.status === 'accepted') {
                    console.log('‚úÖ ¬°LA FUNCI√ìN S√ç FUNCIONA! El problema podr√≠a ser de actualizaci√≥n en tiempo real');
                } else {
                    console.log('‚ùå La funci√≥n NO est√° actualizando correctamente');
                }
            }, 2000);
        }

        return todasOrdenes;

    } catch (error) {
        console.error('üí• Error en debug:', error);
    }
}

// Funci√≥n para verificar la consulta exacta del componente
async function debugConsultaComponente() {
    console.log('\nüîç DEBUGGEANDO CONSULTA DEL COMPONENTE...');
    
    try {
        // Esta es la consulta EXACTA que usa el componente SellerOrderManagement
        const { data: ordenes, error } = await supabase
            .from('orders')
            .select(`
                *,
                order_items (
                    id,
                    product_name,
                    quantity,
                    unit_price,
                    product_type,
                    product_id,
                    daily_product_id
                ),
                users!orders_buyer_id_fkey (
                    name,
                    phone
                )
            `)
            .eq('status', 'pending')  // ‚Üê AQU√ç EST√Å EL FILTRO
            .order('created_at', { ascending: false });

        console.log('üìã Consulta del componente (solo pending):');
        console.log('   √ìrdenes encontradas:', ordenes?.length || 0);
        
        if (ordenes && ordenes.length > 0) {
            ordenes.forEach((orden, index) => {
                console.log(`   ${index + 1}. ${orden.order_number} - ${orden.status}`);
            });
        }

        // Ahora hacer la consulta SIN el filtro de status
        const { data: todasParaComparar, error: error2 } = await supabase
            .from('orders')
            .select(`
                *,
                order_items (
                    id,
                    product_name,
                    quantity,
                    unit_price,
                    product_type,
                    product_id,
                    daily_product_id
                ),
                users!orders_buyer_id_fkey (
                    name,
                    phone
                )
            `)
            .order('created_at', { ascending: false })
            .limit(10);

        console.log('\nüìã Consulta SIN filtro (todas):');
        console.log('   √ìrdenes encontradas:', todasParaComparar?.length || 0);
        
        if (todasParaComparar && todasParaComparar.length > 0) {
            todasParaComparar.forEach((orden, index) => {
                console.log(`   ${index + 1}. ${orden.order_number} - ${orden.status}`);
            });
        }

        // Comparar para encontrar √≥rdenes que deber√≠an estar accepted pero aparecen como pending
        const discrepancias = [];
        todasParaComparar?.forEach(orden => {
            if (orden.accepted_at && orden.status === 'pending') {
                discrepancias.push(orden);
            }
        });

        if (discrepancias.length > 0) {
            console.log('\n‚ö†Ô∏è  DISCREPANCIAS ENCONTRADAS:');
            discrepancias.forEach((orden, index) => {
                console.log(`   ${index + 1}. ${orden.order_number}: Status=${orden.status} pero Accepted_at=${orden.accepted_at}`);
            });
        }

    } catch (error) {
        console.error('üí• Error en debug consulta:', error);
    }
}

// Funci√≥n para verificar subscripciones en tiempo real
function debugSubscripciones() {
    console.log('\nüîç DEBUGGEANDO SUBSCRIPCIONES TIEMPO REAL...');
    
    // Crear subscripci√≥n de prueba
    const subscription = supabase
        .channel('orders_debug')
        .on('postgres_changes', 
            { event: '*', schema: 'public', table: 'orders' },
            (payload) => {
                console.log('üì° CAMBIO DETECTADO EN TIEMPO REAL:');
                console.log('   Evento:', payload.eventType);
                console.log('   Datos:', payload.new || payload.old);
            }
        )
        .subscribe((status) => {
            console.log('üì° Estado de subscripci√≥n:', status);
        });

    console.log('‚úÖ Subscripci√≥n de debug creada. Ahora intenta aceptar una orden y ver√°s los cambios aqu√≠.');
    
    // Funci√≥n para limpiar la subscripci√≥n
    window.limpiarDebugSubscripcion = () => {
        subscription.unsubscribe();
        console.log('üßπ Subscripci√≥n de debug eliminada');
    };
}

// Funci√≥n para forzar actualizaci√≥n de una orden espec√≠fica
async function forzarActualizacionOrden(orderId) {
    console.log(`\nüîß FORZANDO ACTUALIZACI√ìN DE ORDEN: ${orderId}`);
    
    try {
        const { data, error } = await supabase
            .from('orders')
            .update({ updated_at: new Date().toISOString() })
            .eq('id', orderId)
            .select();

        if (error) {
            console.error('‚ùå Error forzando actualizaci√≥n:', error);
        } else {
            console.log('‚úÖ Orden actualizada:', data);
        }
    } catch (error) {
        console.error('üí• Error en forzar actualizaci√≥n:', error);
    }
}

// Ejecutar todas las funciones de debug
async function ejecutarDebugCompleto() {
    console.log('üöÄ EJECUTANDO DEBUG COMPLETO...');
    
    await debugOrdenEspecifica();
    await debugConsultaComponente();
    debugSubscripciones();
    
    console.log('\nüìö FUNCIONES DE DEBUG DISPONIBLES:');
    console.log('‚Ä¢ debugOrdenEspecifica() - Ver todas las √≥rdenes con detalles');
    console.log('‚Ä¢ debugConsultaComponente() - Comparar consultas del componente');
    console.log('‚Ä¢ debugSubscripciones() - Monitorear cambios en tiempo real');
    console.log('‚Ä¢ forzarActualizacionOrden("ORDER_ID") - Forzar actualizaci√≥n');
    console.log('‚Ä¢ limpiarDebugSubscripcion() - Limpiar subscripciones de debug');
}

// Ejecutar autom√°ticamente
ejecutarDebugCompleto();
