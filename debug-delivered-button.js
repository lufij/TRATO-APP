// DEBUG ESPEC√çFICO DEL BOT√ìN ENTREGADO
// ====================================

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config({ path: '.env.local' })

const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function debugDeliveredButton() {
  console.log('üîç DEBUG ESPEC√çFICO BOT√ìN "ENTREGADO"')
  console.log('=====================================')

  try {
    // 1. Buscar la orden de prueba
    console.log('1. Buscando orden de prueba...')
    const { data: testOrders, error: findError } = await supabase
      .from('orders')
      .select('*')
      .eq('customer_name', 'TEST - Cliente En Tr√°nsito')

    if (findError) {
      console.error('‚ùå Error buscando orden:', findError.message)
      return
    }

    if (!testOrders || testOrders.length === 0) {
      console.log('‚ùå No se encontr√≥ orden de prueba')
      console.log('   Ejecuta primero el script de creaci√≥n de orden')
      return
    }

    const testOrder = testOrders[0]
    console.log('‚úÖ Orden de prueba encontrada:')
    console.log(`   ID: ${testOrder.id}`)
    console.log(`   Status: ${testOrder.status}`)
    console.log(`   Driver ID: ${testOrder.driver_id}`)
    console.log(`   Customer: ${testOrder.customer_name}`)

    // 2. Ejecutar la funci√≥n de debug
    console.log('\n2. Ejecutando debug de actualizaci√≥n...')
    const { data: debugResult, error: debugError } = await supabase
      .rpc('debug_order_update', {
        target_order_id: testOrder.id,
        new_status: 'delivered',
        target_driver_id: testOrder.driver_id
      })

    if (debugError) {
      console.error('‚ùå Error en debug function:', debugError.message)
      console.log('   C√≥digo:', debugError.code)
      console.log('   Detalles:', debugError.details)
      return
    }

    if (debugResult && debugResult.length > 0) {
      const result = debugResult[0]
      console.log('\nüìã RESULTADO DEL DEBUG:')
      console.log('========================')
      console.log(`‚úÖ Success: ${result.success}`)
      console.log(`üìù Message: ${result.message}`)
      console.log(`üë§ Current User ID: ${result.current_user_id}`)
      console.log(`üöö Order Driver ID: ${result.order_driver_id}`)
      console.log(`üìä Current Status: ${result.order_current_status}`)
      console.log(`üîê Update Allowed: ${result.update_allowed}`)

      // 3. An√°lisis del resultado
      console.log('\nüîç AN√ÅLISIS:')
      console.log('============')
      
      if (result.success) {
        console.log('üéâ ¬°LA ACTUALIZACI√ìN FUNCION√ì!')
        console.log('   El problema puede ser en el frontend')
        
        // Verificar si realmente se actualiz√≥
        console.log('\n4. Verificando actualizaci√≥n en DB...')
        const { data: updatedOrder } = await supabase
          .from('orders')
          .select('*')
          .eq('id', testOrder.id)
          .single()

        if (updatedOrder) {
          console.log(`   Status despu√©s del update: ${updatedOrder.status}`)
          console.log(`   Delivered at: ${updatedOrder.delivered_at}`)
        }
        
      } else {
        console.log('‚ùå LA ACTUALIZACI√ìN FALL√ì')
        
        if (result.current_user_id === null) {
          console.log('üî• PROBLEMA: Usuario no autenticado')
          console.log('   El repartidor debe loguearse en la app')
        } else if (result.current_user_id !== result.order_driver_id) {
          console.log('üî• PROBLEMA: Usuario no es el driver asignado')
          console.log(`   Usuario actual: ${result.current_user_id}`)
          console.log(`   Driver de la orden: ${result.order_driver_id}`)
        } else {
          console.log('üî• PROBLEMA: ' + result.message)
        }
      }

    } else {
      console.log('‚ùå No se obtuvo resultado del debug')
    }

    // 4. Crear SQL directo para testing
    console.log('\nüìù SQL DIRECTO PARA TESTING:')
    console.log('=============================')
    console.log(`-- Actualizar orden manualmente:`)
    console.log(`UPDATE orders SET`)
    console.log(`  status = 'delivered',`)
    console.log(`  delivered_at = NOW(),`)
    console.log(`  updated_at = NOW()`)
    console.log(`WHERE id = '${testOrder.id}';`)
    console.log(``)
    console.log(`-- Verificar cambio:`)
    console.log(`SELECT id, status, delivered_at FROM orders WHERE id = '${testOrder.id}';`)
    
    // 5. Si no funciona, crear orden con status in_transit
    if (testOrder.status !== 'in_transit') {
      console.log('\nüîÑ PREPARANDO ORDEN PARA PRUEBA:')
      console.log('=================================')
      console.log('La orden debe estar en status "in_transit" para poder marcarla como entregada')
      
      const { data: updateResult, error: updateError } = await supabase
        .from('orders')
        .update({ 
          status: 'in_transit',
          in_transit_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('id', testOrder.id)
        .select()

      if (updateError) {
        console.log('‚ùå Error actualizando a in_transit:', updateError.message)
        console.log('\nüìù Ejecuta este SQL manualmente:')
        console.log(`UPDATE orders SET status = 'in_transit', in_transit_at = NOW() WHERE id = '${testOrder.id}';`)
      } else {
        console.log('‚úÖ Orden actualizada a "in_transit"')
        console.log('   Ahora refresca la p√°gina y prueba el bot√≥n verde')
      }
    }

  } catch (error) {
    console.error('‚ùå Error general:', error)
  }

  console.log('\nüîö DEBUG COMPLETADO')
  console.log('===================')
  console.log('üí° PR√ìXIMO PASO:')
  console.log('   1. Refresca la p√°gina del repartidor')
  console.log('   2. Aseg√∫rate de que la orden est√© en "En tr√°nsito"')
  console.log('   3. Haz clic en el bot√≥n verde "Marcar como Entregado"')
  console.log('   4. Abre DevTools (F12) y mira la consola por errores')
}

debugDeliveredButton()
  .then(() => {
    console.log('\n‚úÖ Debug completado')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Error:', error)
    process.exit(1)
  })
