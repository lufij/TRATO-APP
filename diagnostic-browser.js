// Diagn√≥stico completo del sistema de notificaciones
// Ejecuta este script en la consola del navegador (F12)

console.log('üîç DIAGN√ìSTICO SISTEMA DE NOTIFICACIONES TRATO APP');
console.log('================================================');

const diagnostics = {
  environment: {},
  notifications: {},
  audio: {},
  realtime: {},
  errors: []
};

// 1. Informaci√≥n del entorno
console.log('\nüì± 1. INFORMACI√ìN DEL ENTORNO');
console.log('-----------------------------');

try {
  diagnostics.environment = {
    userAgent: navigator.userAgent,
    isMobile: /iPhone|iPad|iPod|Android/i.test(navigator.userAgent),
    isHTTPS: window.location.protocol === 'https:',
    url: window.location.href,
    timestamp: new Date().toISOString()
  };
  
  console.log('‚úÖ Dispositivo:', diagnostics.environment.isMobile ? 'M√≥vil' : 'Escritorio');
  console.log('‚úÖ Protocolo:', diagnostics.environment.isHTTPS ? 'HTTPS ‚úì' : 'HTTP ‚ùå');
  console.log('‚úÖ URL:', diagnostics.environment.url);
} catch (error) {
  diagnostics.errors.push(`Error en diagn√≥stico de entorno: ${error.message}`);
  console.error('‚ùå Error:', error);
}

// 2. Capacidades de notificaciones
console.log('\nüîî 2. CAPACIDADES DE NOTIFICACIONES');
console.log('----------------------------------');

try {
  diagnostics.notifications = {
    apiSupported: 'Notification' in window,
    permission: Notification.permission,
    serviceWorkerSupported: 'serviceWorker' in navigator,
    pushSupported: 'PushManager' in window,
    vapidSupported: 'showNotification' in ServiceWorkerRegistration.prototype
  };
  
  console.log('‚úÖ API Notifications:', diagnostics.notifications.apiSupported ? 'Soportada ‚úì' : 'No soportada ‚ùå');
  console.log('‚úÖ Permisos:', diagnostics.notifications.permission);
  console.log('‚úÖ Service Worker:', diagnostics.notifications.serviceWorkerSupported ? 'Soportado ‚úì' : 'No soportado ‚ùå');
  console.log('‚úÖ Push Manager:', diagnostics.notifications.pushSupported ? 'Soportado ‚úì' : 'No soportado ‚ùå');
  console.log('‚úÖ VAPID:', diagnostics.notifications.vapidSupported ? 'Soportado ‚úì' : 'No soportado ‚ùå');
  
  // Test de notificaci√≥n si tiene permisos
  if (diagnostics.notifications.permission === 'granted') {
    console.log('üß™ Probando notificaci√≥n...');
    new Notification('üß™ Test TRATO', {
      body: 'Diagn√≥stico de notificaciones - si ves esto funciona!',
      icon: '/icon-192x192.png',
      tag: 'diagnostic-test'
    });
    console.log('‚úÖ Notificaci√≥n de prueba enviada');
  }
} catch (error) {
  diagnostics.errors.push(`Error en diagn√≥stico de notificaciones: ${error.message}`);
  console.error('‚ùå Error:', error);
}

// 3. Capacidades de audio
console.log('\nüîä 3. CAPACIDADES DE AUDIO');
console.log('-------------------------');

try {
  diagnostics.audio = {
    audioContextSupported: 'AudioContext' in window || 'webkitAudioContext' in window,
    audioSupported: 'Audio' in window,
    canPlayMP3: false,
    canPlayWAV: false,
    audioContextState: null
  };
  
  // Test AudioContext
  if (diagnostics.audio.audioContextSupported) {
    const AudioContextClass = window.AudioContext || window.webkitAudioContext;
    const testContext = new AudioContextClass();
    diagnostics.audio.audioContextState = testContext.state;
    testContext.close();
  }
  
  // Test Audio formats
  if (diagnostics.audio.audioSupported) {
    const testAudio = new Audio();
    diagnostics.audio.canPlayMP3 = testAudio.canPlayType('audio/mpeg') !== '';
    diagnostics.audio.canPlayWAV = testAudio.canPlayType('audio/wav') !== '';
  }
  
  console.log('‚úÖ AudioContext:', diagnostics.audio.audioContextSupported ? 'Soportado ‚úì' : 'No soportado ‚ùå');
  console.log('‚úÖ Audio Element:', diagnostics.audio.audioSupported ? 'Soportado ‚úì' : 'No soportado ‚ùå');
  console.log('‚úÖ MP3:', diagnostics.audio.canPlayMP3 ? 'Soportado ‚úì' : 'No soportado ‚ùå');
  console.log('‚úÖ WAV:', diagnostics.audio.canPlayWAV ? 'Soportado ‚úì' : 'No soportado ‚ùå');
  console.log('‚úÖ Estado AudioContext:', diagnostics.audio.audioContextState || 'N/A');
  
  // Test de sonido b√°sico
  if (diagnostics.audio.audioSupported) {
    console.log('üß™ Probando sonido b√°sico...');
    const testAudio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEYBDyb3/LNeSsFJYHO8tiJNwgZaLvt559NEAxQp+PwtmM');
    testAudio.volume = 0.1;
    testAudio.play().then(() => {
      console.log('‚úÖ Sonido de prueba reproducido correctamente');
    }).catch(error => {
      console.log('‚ùå Error al reproducir sonido:', error.message);
      diagnostics.errors.push(`Error de audio: ${error.message}`);
    });
  }
} catch (error) {
  diagnostics.errors.push(`Error en diagn√≥stico de audio: ${error.message}`);
  console.error('‚ùå Error:', error);
}

// 4. Conexi√≥n Supabase Realtime
console.log('\nüîÑ 4. CONEXI√ìN SUPABASE REALTIME');
console.log('-------------------------------');

try {
  // Verificar si Supabase est√° disponible
  if (typeof window.supabase !== 'undefined' || typeof supabase !== 'undefined') {
    console.log('‚úÖ Cliente Supabase encontrado');
    
    // Test de conexi√≥n realtime (si supabase est√° disponible)
    const testRealtime = async () => {
      try {
        const client = window.supabase || supabase;
        console.log('üß™ Probando conexi√≥n realtime...');
        
        const channel = client
          .channel('diagnostic-test')
          .on('broadcast', { event: 'test' }, (payload) => {
            console.log('‚úÖ Mensaje realtime recibido:', payload);
            diagnostics.realtime.connected = true;
          })
          .subscribe((status) => {
            console.log('üîÑ Estado del canal:', status);
            diagnostics.realtime.status = status;
            
            if (status === 'SUBSCRIBED') {
              console.log('‚úÖ Canal suscrito, enviando mensaje de prueba...');
              channel.send({
                type: 'broadcast',
                event: 'test',
                payload: { message: 'test diagnostic', timestamp: Date.now() }
              });
            }
          });
        
        // Cleanup despu√©s de 5 segundos
        setTimeout(() => {
          client.removeChannel(channel);
          console.log('üßπ Canal de prueba limpiado');
        }, 5000);
        
      } catch (error) {
        console.error('‚ùå Error en test realtime:', error);
        diagnostics.errors.push(`Error realtime: ${error.message}`);
      }
    };
    
    testRealtime();
  } else {
    console.log('‚ùå Cliente Supabase no encontrado');
    diagnostics.errors.push('Cliente Supabase no disponible');
  }
} catch (error) {
  diagnostics.errors.push(`Error en diagn√≥stico realtime: ${error.message}`);
  console.error('‚ùå Error:', error);
}

// 5. Verificar localStorage y configuraci√≥n
console.log('\nüíæ 5. ALMACENAMIENTO LOCAL');
console.log('-------------------------');

try {
  const soundSettings = localStorage.getItem('trato-sound-notifications');
  const authUser = localStorage.getItem('supabase.auth.token');
  
  console.log('‚úÖ Configuraci√≥n de sonido:', soundSettings || 'No configurado');
  console.log('‚úÖ Usuario autenticado:', authUser ? 'S√≠' : 'No');
  
  diagnostics.storage = {
    soundSettings: soundSettings,
    hasAuth: !!authUser,
    localStorageAvailable: typeof Storage !== 'undefined'
  };
} catch (error) {
  diagnostics.errors.push(`Error en almacenamiento: ${error.message}`);
  console.error('‚ùå Error:', error);
}

// 6. Resumen y recomendaciones
console.log('\nüìã 6. RESUMEN Y RECOMENDACIONES');
console.log('==============================');

const issues = [];
const recommendations = [];

// Verificar problemas cr√≠ticos
if (!diagnostics.environment.isHTTPS) {
  issues.push('‚ùå CR√çTICO: Se requiere HTTPS para notificaciones');
  recommendations.push('üîß Usar https://localhost:5173 en desarrollo');
}

if (diagnostics.notifications.permission !== 'granted') {
  issues.push('‚ö†Ô∏è Permisos de notificaci√≥n no otorgados');
  recommendations.push('üîß Solicitar permisos de notificaci√≥n al usuario');
}

if (!diagnostics.notifications.apiSupported) {
  issues.push('‚ùå CR√çTICO: API de notificaciones no soportada');
  recommendations.push('üîß Usar navegador compatible (Chrome, Firefox, Safari)');
}

if (!diagnostics.audio.audioContextSupported) {
  issues.push('‚ö†Ô∏è AudioContext no soportado');
  recommendations.push('üîß Fallback a elemento Audio HTML5');
}

// Mostrar resumen
if (issues.length === 0) {
  console.log('üéâ ¬°SISTEMA DE NOTIFICACIONES LISTO!');
  console.log('‚úÖ Todos los componentes funcionan correctamente');
} else {
  console.log('‚ö†Ô∏è PROBLEMAS ENCONTRADOS:');
  issues.forEach(issue => console.log(issue));
  
  console.log('\nüîß RECOMENDACIONES:');
  recommendations.forEach(rec => console.log(rec));
}

// Mostrar errores si los hay
if (diagnostics.errors.length > 0) {
  console.log('\n‚ùå ERRORES DETECTADOS:');
  diagnostics.errors.forEach(error => console.log('   ', error));
}

// Exportar diagn√≥stico completo
console.log('\nüì§ DIAGN√ìSTICO COMPLETO:');
console.log('========================');
console.log(JSON.stringify(diagnostics, null, 2));

// Funci√≥n helper para copiar diagn√≥stico
window.copyDiagnostics = () => {
  const report = `
DIAGN√ìSTICO SISTEMA NOTIFICACIONES TRATO APP
Fecha: ${new Date().toLocaleString()}

ENTORNO:
- Dispositivo: ${diagnostics.environment.isMobile ? 'M√≥vil' : 'Escritorio'}
- HTTPS: ${diagnostics.environment.isHTTPS ? 'S√≠' : 'No'}
- URL: ${diagnostics.environment.url}

NOTIFICACIONES:
- API: ${diagnostics.notifications.apiSupported ? 'Soportada' : 'No soportada'}
- Permisos: ${diagnostics.notifications.permission}
- Service Worker: ${diagnostics.notifications.serviceWorkerSupported ? 'S√≠' : 'No'}

AUDIO:
- AudioContext: ${diagnostics.audio.audioContextSupported ? 'S√≠' : 'No'}
- Estado: ${diagnostics.audio.audioContextState || 'N/A'}

PROBLEMAS: ${issues.length}
${issues.join('\n')}

RECOMENDACIONES: ${recommendations.length}
${recommendations.join('\n')}

ERRORES: ${diagnostics.errors.length}
${diagnostics.errors.join('\n')}
`;
  
  navigator.clipboard.writeText(report).then(() => {
    console.log('üìã Diagn√≥stico copiado al portapapeles');
  });
};

console.log('\nüí° Para copiar el diagn√≥stico completo ejecuta: copyDiagnostics()');
